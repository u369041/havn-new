// src/routes/debug.ts
import { Router } from "express";
import { Prisma, PrismaClient } from "@prisma/client";
import { prisma as sharedClient } from "../prisma.js";

export const router = Router();

// Use the shared prisma if your project exposes one; otherwise fall back.
const prisma: PrismaClient = (sharedClient as PrismaClient) ?? new PrismaClient();

type SeedOptions = {
  count?: number;
  clearFirst?: boolean;
};

function makeSlug(i: number) {
  return `demo-property-${i.toString().padStart(3, "0")}`;
}

function makeTitle(i: number) {
  return `Demo Property #${i}`;
}

function randomInt(min: number, max: number) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function makeRecord(i: number) {
  return {
    slug: makeSlug(i),
    title: makeTitle(i),
    price: randomInt(200_000, 1_200_000),
    beds: randomInt(1, 5),
    baths: randomInt(1, 3),
    ber: ["A1", "A2", "B1", "B2", "C1", "C2", "D1", "D2"][randomInt(0, 7)],
    eircode: `D${randomInt(1, 24)} ${randomInt(1000, 9999)}`,
    type: ["Apartment", "House", "Duplex", "Bungalow"][randomInt(0, 3)],
    photos: [
      `https://picsum.photos/seed/${i}-1/800/500`,
      `https://picsum.photos/seed/${i}-2/800/500`,
      `https://picsum.photos/seed/${i}-3/800/500`,
    ] as string[],
    overview:
      "This is autogenerated demo data intended for development and testing.",
    features: [
      "Near public transport",
      "Garden",
      "Parking",
      "Newly renovated",
    ] as string[],
  };
}

router.post("/api/debug/seed-demo", async (req, res) => {
  try {
    const opts: SeedOptions = req.body ?? {};
    const count = Math.max(1, Math.min(200, Number(opts.count ?? 30)));
    const clearFirst = Boolean(opts.clearFirst ?? true);

    if (clearFirst) {
      await prisma.property.deleteMany({});
    }

    // Create operations
    const ops: Prisma.PrismaPromise<any>[] = Array.from({ length: count }).map(
      (_, i) => {
        const r = makeRecord(i + 1);
        return prisma.property.upsert({
          where: { slug: r.slug },
          create: r,
          update: r,
        });
      }
    );

    // Chunk and run in transactions (no timeout option in Prisma v5)
    const CHUNK = 50;
    for (let i = 0; i < ops.length; i += CHUNK) {
      const chunk = ops.slice(i, i + CHUNK);
      await prisma.$transaction(chunk);
    }

    const total = await prisma.property.count();
    res.json({ ok: true, seeded: count, total });
  } catch (err: any) {
    const message =
      (err?.message as string) ??
      "Unknown error while seeding demo properties.";
    res.status(500).json({ ok: false, error: message });
  }
});

router.post("/api/debug/seed-clear", async (_req, res) => {
  try {
    const result = await prisma.property.deleteMany({});
    res.json({ ok: true, deleted: result.count });
  } catch (err: any) {
    res.status(500).json({ ok: false, error: err?.message ?? "clear failed" });
  }
});

router.get("/api/debug/ping-db", async (_req, res) => {
  try {
    await prisma.$queryRaw`SELECT 1 as ok`;
    res.json({ ok: true, result: [{ ok: 1 }] });
  } catch (err: any) {
    res
      .status(500)
      .json({ ok: false, error: err?.message ?? "database not reachable" });
  }
});

export default router;
